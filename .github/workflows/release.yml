name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version
          awk '/^## \['"${{ steps.version.outputs.VERSION }}"'\]/{flag=1;next}/^## \[/{flag=0}flag' addon/CHANGELOG.md > release-notes.md
          
          if [ ! -s release-notes.md ]; then
            echo "No changelog found for version ${{ steps.version.outputs.VERSION }}"
            echo "This release includes various improvements and bug fixes." > release-notes.md
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'alpha') }}
      
      - name: Update addon config version
        run: |
          sed -i "s/version: .*/version: \"${{ steps.version.outputs.VERSION }}\"/" addon/config.yaml
      
      - name: Update repository manifest
        run: |
          # Update repository.yaml with new version
          python -c "
          import yaml
          
          with open('repository.yaml', 'r') as f:
              repo = yaml.safe_load(f)
          
          # Update repository metadata
          repo['updated'] = '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
          
          with open('repository.yaml', 'w') as f:
              yaml.dump(repo, f, default_flow_style=False)
          "
      
      - name: Commit version updates
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add addon/config.yaml repository.yaml
          git diff --cached --quiet || git commit -m "chore: update version to ${{ steps.version.outputs.VERSION }} [skip ci]"
      
      - name: Push changes
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
  
  publish-images:
    needs: release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        arch: [amd64, aarch64, armhf, armv7, i386]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Build and push addon image
        uses: docker/build-push-action@v5
        with:
          context: addon/
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.arch }}-ha-mcp-v2:${{ steps.version.outputs.VERSION }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.arch }}-ha-mcp-v2:latest
          build-args: |
            BUILD_FROM=ghcr.io/home-assistant/${{ matrix.arch }}-base-python:3.12
            BUILD_ARCH=${{ matrix.arch }}
            BUILD_VERSION=${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max